//------------------------------------------------
//--- 010 Editor v11.0 Binary Template
//
//      File: mmdl.bt
//   Authors: M-1
//   Version: 1.0
//   Purpose: Parse Nintendo's .mmdl files (Metroid MoDeL? or  Mercury)
//  Category: Game
// File Mask: *.mmdl
//  ID Bytes: 4D 4D 44 4C
//   History: 
//------------------------------------------------
#include "../../math.bt"
LittleEndian();
local int i, j, pos = 0;

void Align(int Size)
{
    while(FTell() % Size){
        FSkip(1);
    }
};

typedef enum<short>
{
    Byte,
    Ubyte,
    Short,
    Float
}DataTypes;

typedef enum<int>
{
	Single,
	Rigid,
	Smooth
}SkinningModes;

typedef struct {
    int SeekOffset;
    int ReturnOffset;
} Node;

typedef struct {
    Vector3F Translation;
    Vector3F Rotation;
    Vector3F Scale;
    Align(0x80);//FAlign doesn't work?
} Bone;

typedef struct {
    int BoneOffset;
    int BoneNameOffset;
    int ParentNameOffset;
    int HasSkinningMatrix;
    int Unk2;//Makes Meshes invisible


    FSeek(BoneNameOffset);
    string Name;
    if(ParentNameOffset != 0){
        FSeek(ParentNameOffset);
        string Parent;
    }
} BoneInfo;

typedef struct {
    int Unk0;
    int Unk1;
    //Printf("%g\n", Unk1);
    if(Unk1 == 4){
        Vector4F Unk2;
    }
    if(Unk1 == 2){
        float Unk2;
    }
} UnkStruct;

typedef struct {
    int Unk0;
    int Unk1;
    int Unk2;
    int Unk3;
    float Unk4;
    int Offset0;
    int Unk5;
    int Unk6;
    int Unk7;
    int Unk8;
    float Unk9;
    int Unk10;
} UnkStruct1;

typedef struct {
    int MatOffset;
    int Unk0;
    int Unk1;
    int Unk2;
    float Unk3;
    int Unk3Bool;
    int UnkOffset4;
    int Unk5;
    int UnkOffset6;


    FSeek(UnkOffset4);
    int Offset0;
    int Offset1;
    FSeek(Offset1);
    UnkStruct1 idk2;
} UnkStruct2;//LookUpTable I think

typedef struct (int NameOffset, int CoordOffset) {
    FSeek(NameOffset);
    string Name;

    FSeek(CoordOffset);

//Guessing
    int TranslationX;
    int TranslationY;
    Vector2F Scale;
    float Rotation;
    int Unk[10];
} TexCoord;//Not sure

typedef struct {
    //I don't have much an idea yet...
    int MaterialName;
    int ShaderName;
    int Unknown[2];
    Vector3F Color0;//Emission?
    Vector3F Color1;//Ambient?
    Vector4F Color2;//Diffuse?
    Vector4F Color3;
    Vector4F Color4;
    Vector4F Color5;
    Vector4F Color6;
    Vector4F Color7;
    //Vector4F Colors[5];
    int Unk0;
    int Unk1;
    int Unk2;
    int Tex0NameOffset;
    int Tex0CoordOffset;
    int Tex1NameOffset;
    int Tex1CoordOffset;
    int Tex2NameOffset;
    int Tex2CoordOffset;
    int Unk3;
    byte Unk4;//Makes the mesh bright?
    byte UnkBool0;//Makes mesh invisible
    byte DepthWrite;//IsDepthTestEnabled?
    byte UnkBool1;//IsDepthTestEnabled too?
    int Unk6[18];
    byte Unk7;
    FSkip(3);
    int LookupTableNameOffset;
    int Unk9;
    int UnkOffset0;
    int Unk10;
    int Unk11;

    FSeek(UnkOffset0);
    ReadNode(257);


    FSeek(0);
    if(Tex0CoordOffset != 0){
        TexCoord Tex0(Tex0NameOffset, Tex0CoordOffset);
    }
    if(Tex1CoordOffset != 0){
        TexCoord Tex1(Tex1NameOffset, Tex1CoordOffset);
    }
    if(Tex2CoordOffset != 0){
        TexCoord Tex2(Tex2NameOffset, Tex2CoordOffset);
    }
} Material;

typedef struct {
    int PrimitiveOffset;
    SkinningModes SkinningMode;
    int BoneTableCount;
    int BoneTableOffset;

    FSeek(BoneTableOffset);
    int BoneTable[BoneTableCount];
} Shape;

typedef struct {
    int ShapeOffset;
    int MaterialOffset;
    int MeshNameOffset;
    int IsVisible;
    int UnkBool1;
} Mesh;

typedef struct {
    int NodeNameOffset;
    int IsNodeVisible;

    FSeek(NodeNameOffset);
    string MeshName;
} MeshNodeVis;

typedef struct {
    float NoIdea[19];//BoundBoxStuff maybe
    int VertexBufferOffset;
    int PrimitiveCount;
    int PrimitiveOffset;
    Vector3F PositionOffset;

    FSeek(PrimitiveOffset);
    ReadNode(255);
} SeparateShape;

typedef struct {
    int Unk;
    DataTypes Unk0;
    short IsVisible;
    int Unk2;
    int FaceCount;
    int FaceOffset;

    FSeek(FaceOffset);
    ushort Faces[FaceCount];
} Primitive;

typedef enum<int>
{
	Position,
	Normal,
	UV0,
    UV1,
    UV2,
    Color = 5,
    BoneIndex = 6,
    BoneWeight = 7,
    Tangent = 8,
}AttributeTypes;

typedef struct {
    AttributeTypes Type;
    int Start;
    DataTypes DataType;
    short Elements;
    int PossiblyScale;
} Attribute;

typedef struct {
    int Unk;
    int Unk1;
    int VertexBufferSize;
    int VertexCount;
    int VertexOffset;
    int AttributeCount;
    Attribute Attributes[AttributeCount];

    pos = FTell();

    for(j = 0; j < AttributeCount; j++){
        if(Attributes[j].Type == 0){
            FSeek(VertexOffset + Attributes[j].Start);
            Vector3F Pos[VertexCount];
        }
        if(Attributes[j].Type == 1){
            FSeek(VertexOffset + Attributes[j].Start);
            Vector3F Nrm[VertexCount];
        }
        if(Attributes[j].Type == 2){
            FSeek(VertexOffset + Attributes[j].Start);
            Vector2F UV0[VertexCount];
        }
        if(Attributes[j].Type == 5){
            FSeek(VertexOffset + Attributes[j].Start);
            Vector4F Col[VertexCount];
        }
        if(Attributes[j].Type == 6){
            FSeek(VertexOffset + Attributes[j].Start);

            if(Attributes[j].Elements == 1){
                float BI[VertexCount];
            }
            if(Attributes[j].Elements == 2){
                Vector2F BI[VertexCount];
            }
            if(Attributes[j].Elements == 3){
                Vector3F BI[VertexCount];
            }
            if(Attributes[j].Elements == 4){
                Vector4F BI[VertexCount];
            }
        }
        if(Attributes[j].Type == 7){
            FSeek(VertexOffset + Attributes[j].Start);
            Vector4F BW[VertexCount];
        }
        if(Attributes[j].Type == 8){
            FSeek(VertexOffset + Attributes[j].Start);
            Vector3F Tan[VertexCount];
        }
    }

    FSeek(pos);
} VertexBuffer;

typedef struct {
    char Magic[4];
    short VersionMajor;
    short VersionMinor;
    int TypeOffsets[10];
} HEADER;


typedef struct {
    HEADER Hdr<bgcolor=cYellow>; //HeaDeR

    //0 = VertexBuffers
    //1 = Primitives
    //2 = Shapes
    //3 = Materials
    //4 = Meshes
    //5 = MeshNodeVisibility
    //6 = Bones
    //7 = Skeleton
    //8 = Unused. Always 0
    //9 = MaterialAnims

    for(i = 0; i < 10; i++){
        if(Hdr.TypeOffsets[i] != 0){
            FSeek(Hdr.TypeOffsets[i]);
            ReadNode(i);
        }
    }
} MMDL;

MMDL File;

void ReadNode(int Type)
{
    Node N<bgcolor=cGreen, hidden=true>;
    FSeek(N.SeekOffset);

    if(Type == 0){
        VertexBuffer VB<bgcolor=cRed>;
    }
    else if(Type == 1){
        Primitive PRM<bgcolor=cBlue>;
    }
    else if(Type == 2){
        SeparateShape SP<bgcolor=cDkPurple>;
    }
    else if(Type == 3){
        Material MP<bgcolor=cDkGreen>;
    }
    else if(Type == 4){
        Mesh MeshInfo<bgcolor=cLtGreen>;
    }
    else if(Type == 5){
        MeshNodeVis MeshVIs<bgcolor=cDkBlue>;
    }
    else if(Type == 6){
        Bone Limb<bgcolor=cDkYellow>;
    }
    else if(Type == 7){
        ReadNode(256);
    }
    else if(Type == 9){
        UnkStruct2 What;
    }
    else if(Type == 255){
        Shape S<bgcolor=cLtRed>;
    }
    else if(Type == 256){
        BoneInfo LimbInfo<bgcolor=cDkRed>;
    }
    else if(Type == 257){
        UnkStruct UnkSub<bgcolor=cLtYellow>;
    }
    else if(Type == 258){
        if(N.SeekOffset > 0){
            UnkStruct1 UnkSub2<bgcolor=cLtYellow>;
        }
    }

    if(N.ReturnOffset){
        FSeek(N.ReturnOffset);
        ReadNode(Type);
    }
}